name: Deploy Without Validation

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install root dependencies
      run: npm install

    - name: Install client dependencies
      run: |
        cd client
        npm install

    - name: Install backend dependencies
      run: |
        cd backend
        npm install

    - name: Create client .env file
      run: |
        cd client
        echo "REACT_APP_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" > .env
        echo "REACT_APP_SPOONACULAR_API_KEY=${{ secrets.SPOONACULAR_API_KEY }}" >> .env

    - name: Build client
      run: npm run build

    - name: Create deployment package
      run: |
        mkdir -p deploy
        # Copy backend files
        cp -r backend/* deploy/
        # Copy built frontend files
        mkdir -p deploy/public
        cp -r client/dist/* deploy/public/

    - name: Create backend .env file in deployment
      run: |
        cd deploy
        echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" > .env
        echo "SPOONACULAR_API_KEY=${{ secrets.SPOONACULAR_API_KEY }}" >> .env
        echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
        echo "PORT=5000" >> .env
        echo "NODE_ENV=production" >> .env

    - name: Create application archive
      run: |
        cd deploy
        zip -r ../deployment.zip . -x "node_modules/*" "*.git*"

    - name: Deploy to EC2
      run: |
        # Set environment variables from secrets
        PRIVATE_KEY="${{ secrets.EC2_SSH_KEY }}"
        HOST="${{ secrets.EC2_HOST }}"
        USER="${{ secrets.EC2_USER }}"
        
        echo "Deploying to ${USER}@${HOST}"
        
        # Create private key file
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        
        # Copy deployment package to EC2
        scp -o StrictHostKeyChecking=no -i private_key deployment.zip ${USER}@${HOST}:~/
        
        # Deploy on EC2
        ssh -o StrictHostKeyChecking=no -i private_key ${USER}@${HOST} << 'EOF'
          # Create application directory
          mkdir -p ~/tabetai-app
          cd ~/tabetai-app
          
          # Stop existing application
          pm2 delete tabetai-app || true
          
          # Backup current deployment (if exists)
          if [ -d "current" ]; then
            rm -rf backup
            mv current backup
          fi
          
          # Extract new deployment
          mkdir -p current
          cd current
          unzip -o ~/deployment.zip
          
          # Install dependencies
          npm install --production
          
          # Install PM2 globally if not exists
          which pm2 || npm install -g pm2
          
          # Start application with PM2
          NODE_ENV=production pm2 start server.js --name "tabetai-app"
          
          # Save PM2 configuration
          pm2 save
          
          # Clean up
          rm ~/deployment.zip
          
          echo "Deployment completed successfully!"
          pm2 status
        EOF
        
        # Clean up local private key
        rm private_key

    - name: Verify Deployment
      run: |
        HOST="${{ secrets.EC2_HOST }}"
        echo "Waiting for application to start..."
        sleep 10
        echo "Testing connection to http://${HOST}:5000/"
        curl -f http://${HOST}:5000/ || echo "Warning: Health check failed, but deployment may still be successful"
