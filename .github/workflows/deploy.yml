name: Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: tabetai-secrets
    
    env:
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}
      EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      SPOONACULAR_API_KEY: ${{ secrets.SPOONACULAR_API_KEY }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test secret availability
      run: |
        # This is a direct test without environment variables
        echo "Testing direct secret injection:"
        if [ -n "${{ secrets.EC2_HOST }}" ]; then
          echo "EC2_HOST is available"
        else
          echo "EC2_HOST is NOT available"
        fi
        
        if [ -n "${{ secrets.EC2_USER }}" ]; then
          echo "EC2_USER is available"  
        else
          echo "EC2_USER is NOT available"
        fi
        
        if [ -n "${{ secrets.EC2_SSH_KEY }}" ]; then
          echo "EC2_SSH_KEY is available"
        else
          echo "EC2_SSH_KEY is NOT available"
        fi
        
        # Try to show the first character of each secret (safe way to test)
        echo "First char of EC2_HOST: ${{ secrets.EC2_HOST && secrets.EC2_HOST[0] || 'EMPTY' }}"

    - name: Debug secrets
      run: |
        echo "Checking if secrets are injected:"
        echo "EC2_HOST: ${EC2_HOST:+SET}"
        echo "EC2_USER: ${EC2_USER:+SET}"
        echo "EC2_SSH_KEY: ${EC2_SSH_KEY:+SET}"
        echo "MONGODB_URI: ${MONGODB_URI:+SET}"
        echo "SPOONACULAR_API_KEY: ${SPOONACULAR_API_KEY:+SET}"
        echo "GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:+SET}"
        
        if [ -z "$EC2_HOST" ] || [ -z "$EC2_USER" ] || [ -z "$EC2_SSH_KEY" ]; then
          echo "CRITICAL: Required secrets are missing"
          echo "Please check GitHub repository secrets at:"
          echo "https://github.com/theblkguy/tabetai-app/settings/secrets/actions"
          exit 1
        fi
        echo "All required secrets are available"

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm install
        cd client && npm install
        cd ../backend && npm install

    - name: Build client
      run: npm run build

    - name: Create backend env file
      run: |
        cd backend
        echo "MONGODB_URI=$MONGODB_URI" > .env
        echo "SPOONACULAR_API_KEY=$SPOONACULAR_API_KEY" >> .env
        echo "GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID" >> .env
        echo "PORT=8080" >> .env
        echo "NODE_ENV=production" >> .env

    - name: Deploy to server
      run: |
        echo "$EC2_SSH_KEY" > private_key
        chmod 600 private_key
        
        echo "Deploying to: $EC2_USER@$EC2_HOST"
        
        # Copy backend files
        rsync -avz --delete -e "ssh -i private_key -o StrictHostKeyChecking=no" \
          backend/ $EC2_USER@$EC2_HOST:~/app/
        
        # Copy built frontend files
        rsync -avz --delete -e "ssh -i private_key -o StrictHostKeyChecking=no" \
          client/dist/ $EC2_USER@$EC2_HOST:~/app/public/
        
        # Deploy on server
        ssh -i private_key -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
          cd ~/app
          npm install --production
          pm2 delete tabetai-app || true
          pm2 start server-simple.js --name tabetai-app --env production
          pm2 save
        EOF
        
        rm -f private_key

    - name: Verify deployment
      run: |
        sleep 10
        curl -f http://$EC2_HOST/ || echo "Warning: Health check failed"
